package templates

import (
	"fmt"
	"strconv"

	"git.ssy.dk/noob/bingbong-go/models"
	"git.ssy.dk/noob/bingbong-go/timing"
)

// Helper function to check if a user is an admin
func isAdmin(user models.User) bool {
    // Check if the user has any AdminAccess records
    if len(user.AdminAccess) > 0 {
        // Check if any of them are active
        for _, access := range user.AdminAccess {
            if access.Active {
                fmt.Println("User", user.Username, "is an admin")
                return true
            }
        }
    }
    fmt.Println("User", user.Username, "is NOT an admin")
    return false
}

templ AdminDashboard(t *timing.RenderTiming, users []models.User, groups []models.UserGroup) {
	@Base("Admin Dashboard", t) {
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-2xl font-bold mb-6">Admin Dashboard</h1>
			<div class="tabs tabs-boxed mb-6">
				<a class="tab tab-active" id="tab-users">Users</a>
				<a class="tab" id="tab-groups">Groups</a>
			</div>
			<div id="users-section" class="space-y-6">
				<div class="flex justify-between items-center">
					<h2 class="text-xl font-semibold">Users</h2>
					<button
						class="btn btn-primary btn-sm"
						hx-get="/api/v1/admin/users/new"
						hx-target="#modal-content"
						hx-trigger="click"
						onclick="document.getElementById('modal').checked = true"
					>
						Add User
					</button>
				</div>
				<div class="overflow-x-auto">
					<table class="table table-zebra w-full">
						<thead>
							<tr>
								<th>ID</th>
								<th>Username</th>
								<th>Email</th>
								<th>Active</th>
								<th>Admin</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody id="users-table-body">
							for _, user := range users {
								<tr>
									<td>{ strconv.FormatUint(uint64(user.ID), 10) }</td>
									<td>{ user.Username }</td>
									<td>{ user.Email }</td>
									<td>
										if user.Active {
											<span class="badge badge-success">Yes</span>
										} else {
											<span class="badge badge-error">No</span>
										}
									</td>
									<td>
										
										if isAdmin(user) {
											<span class="badge badge-success">Yes</span>
										} else {
											<span class="badge badge-error">No</span>
										}
									</td>
									<td>
										<div class="flex space-x-2">
											<button
												class="btn btn-sm btn-outline"
												hx-get={ "/api/v1/admin/users/" + strconv.FormatUint(uint64(user.ID), 10) + "/edit" }
												hx-target="#modal-content"
												hx-trigger="click"
												onclick="document.getElementById('modal').checked = true"
											>
												Edit
											</button>
											<button
												class="btn btn-sm btn-outline btn-error"
												hx-delete={ "/api/v1/admin/users/" + strconv.FormatUint(uint64(user.ID), 10) }
												hx-confirm="Are you sure you want to delete this user?"
												hx-target="#users-table-body"
												hx-swap="outerHTML"
											>
												Delete
											</button>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			<div id="groups-section" class="space-y-6 hidden">
				<div class="flex justify-between items-center">
					<h2 class="text-xl font-semibold">Groups</h2>
					<button
						class="btn btn-primary btn-sm"
						hx-get="/api/v1/admin/groups/new"
						hx-target="#modal-content"
						hx-trigger="click"
						onclick="document.getElementById('modal').checked = true"
					>
						Add Group
					</button>
				</div>
				<div class="overflow-x-auto">
					<table class="table table-zebra w-full">
						<thead>
							<tr>
								<th>ID</th>
								<th>Name</th>
								<th>Description</th>
								<th>Created By</th>
								<th>Members</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody id="groups-table-body">
							for _, group := range groups {
								<tr>
									<td>{ strconv.FormatUint(uint64(group.ID), 10) }</td>
									<td>{ group.Name }</td>
									<td>{ group.Description }</td>
									<td>{ group.Creator.Username }</td>
									<td>{ fmt.Sprint(len(group.Members)) }</td>
									<td>
										<div class="flex space-x-2">
											<button
												class="btn btn-sm btn-outline"
												hx-get={ "/api/v1/admin/groups/" + strconv.FormatUint(uint64(group.ID), 10) + "/edit" }
												hx-target="#modal-content"
												hx-trigger="click"
												onclick="document.getElementById('modal').checked = true"
											>
												Edit
											</button>
											<button
												class="btn btn-sm btn-outline btn-error"
												hx-delete={ "/api/v1/admin/groups/" + strconv.FormatUint(uint64(group.ID), 10) }
												hx-confirm="Are you sure you want to delete this group?"
												hx-target="#groups-table-body"
												hx-swap="outerHTML"
											>
												Delete
											</button>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
		<!-- Modal for adding/editing users and groups -->
		<input type="checkbox" id="modal" class="modal-toggle"/>
		<div class="modal">
			<div class="modal-box" id="modal-content">
				<!-- Content will be loaded dynamically -->
			</div>
			<label class="modal-backdrop" for="modal">Close</label>
		</div>
		<script>
			// Tab switching logic
			document.getElementById('tab-users').addEventListener('click', function() {
				document.getElementById('tab-users').classList.add('tab-active');
				document.getElementById('tab-groups').classList.remove('tab-active');
				document.getElementById('users-section').classList.remove('hidden');
				document.getElementById('groups-section').classList.add('hidden');
			});
			
			document.getElementById('tab-groups').addEventListener('click', function() {
				document.getElementById('tab-groups').classList.add('tab-active');
				document.getElementById('tab-users').classList.remove('tab-active');
				document.getElementById('groups-section').classList.remove('hidden');
				document.getElementById('users-section').classList.add('hidden');
			});
			
			// Add authentication token to all HTMX requests
			document.body.addEventListener('htmx:configRequest', function(evt) {
				const token = localStorage.getItem('authToken');
				if (token) {
					evt.detail.headers['Authorization'] = 'Bearer ' + token;
				}
			});
			
			// Handle unauthorized responses
			document.body.addEventListener('htmx:responseError', function(evt) {
				if (evt.detail.xhr.status === 401) {
					// Redirect to login page
					window.location.href = '/login';
				}
			});
		</script>
	}
}
