package templates

import (
    "git.ssy.dk/noob/bingbong-go/timing"
)

// WebSocketDemo renders the WebSocket demo page
templ WebSocketDemo(t *timing.RenderTiming) {
    @Base("WebSocket Demo", t) {
        <div class="flex flex-col items-center justify-center px-4 py-8">
            <div class="w-full max-w-2xl mx-auto">
                <div class="bg-base-200 rounded-lg shadow-lg p-6">
                    <h1 class="text-3xl font-bold mb-6 text-center text-primary">WebSocket Demo</h1>
                    <p class="mb-6 text-center">
                        This demo showcases real-time bidirectional communication with the server.
                    </p>
                    
                    <!-- Input form -->
                    <div class="form-control mb-6">
                        <div class="input-group">
                            <input
                                type="text"
                                id="messageInput"
                                class="input input-bordered w-full focus:outline-none focus:ring-2 focus:ring-primary"
                                placeholder="Type your message..."
                            />
                            <button
                                class="btn btn-primary"
                                onclick="sendMessage()"
                            >
                                Send
                            </button>
                        </div>
                    </div>
                    
                    <!-- Messages display -->
                    <div>
                        <h2 class="text-xl font-semibold mb-3">Messages:</h2>
                        <div
                            id="messages"
                            class="bg-base-100 p-4 rounded-lg min-h-[250px] max-h-[400px] overflow-y-auto border border-base-300"
                        ></div>
                        <div class="mt-4 text-sm text-base-content/70">
                            <p>Connection status: <span id="connectionStatus" class="font-medium">Connecting...</span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            let ws;
            const connectionStatus = document.getElementById("connectionStatus");
            
            function connect() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                ws = new WebSocket(`${protocol}//${window.location.host}/ws`);
                
                ws.onopen = function() {
                    console.log("Connected to websocket");
                    connectionStatus.textContent = "Connected";
                    connectionStatus.className = "font-medium text-success";
                };
                
                ws.onerror = function(error) {
                    console.error("WebSocket error:", error);
                    connectionStatus.textContent = "Error";
                    connectionStatus.className = "font-medium text-error";
                };
                
                ws.onmessage = function(evt) {
                    const messagesDiv = document.getElementById("messages");
                    const messageElement = document.createElement("div");
                    messageElement.className = "mb-2 p-3 bg-base-200 rounded-md";
                    messageElement.textContent = evt.data;
                    messagesDiv.appendChild(messageElement);
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                };
                
                ws.onclose = function() {
                    console.log("Disconnected from websocket");
                    connectionStatus.textContent = "Disconnected, reconnecting...";
                    connectionStatus.className = "font-medium text-warning";
                    // Attempt to reconnect after 1 second
                    setTimeout(connect, 1000);
                };
            }
            
            function sendMessage() {
                const input = document.getElementById("messageInput");
                if (input.value) {
                    ws.send(input.value);
                    
                    // Add our own message to the list with a different style
                    const messagesDiv = document.getElementById("messages");
                    const messageElement = document.createElement("div");
                    messageElement.className = "mb-2 p-3 bg-primary/10 rounded-md text-right";
                    messageElement.textContent = `You: ${input.value}`;
                    messagesDiv.appendChild(messageElement);
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                    
                    // Clear input
                    input.value = "";
                }
            }
            
            // Connect when the page loads
            connect();
            
            // Allow sending with Enter key
            document.getElementById("messageInput").addEventListener("keypress", function(e) {
                if (e.key === "Enter") {
                    sendMessage();
                }
            });
        </script>
    }
}