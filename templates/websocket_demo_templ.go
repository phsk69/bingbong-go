// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func WebSocketDemo() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"flex flex-col items-center justify-center min-h-screen bg-base-300 p-4\"><div class=\"w-full max-w-md space-y-4\"><div class=\"bg-base-100 rounded-lg shadow-lg p-6\"><h2 class=\"text-xl font-bold mb-4\">WebSocket Demo</h2><!-- Input form --><div class=\"form-control\"><div class=\"input-group\"><input type=\"text\" id=\"messageInput\" class=\"input input-bordered w-full\" placeholder=\"Type your message...\"> <button class=\"btn btn-primary\" onclick=\"sendMessage()\">Send</button></div></div><!-- Messages display --><div class=\"mt-4\"><h3 class=\"text-lg font-semibold mb-2\">Messages:</h3><div id=\"messages\" class=\"bg-base-200 p-4 rounded-lg min-h-[200px] max-h-[400px] overflow-y-auto\"></div></div></div></div></div><script>\n            let ws;\n            \n            function connect() {\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                ws = new WebSocket(`${protocol}//${window.location.host}/ws`);\n                \n                ws.onopen = function() {\n                    console.log(\"Connected to websocket\");\n                };\n                \n                ws.onerror = function(error) {\n                    console.error(\"WebSocket error:\", error);\n                };\n                \n                ws.onmessage = function(evt) {\n                    const messagesDiv = document.getElementById(\"messages\");\n                    const messageElement = document.createElement(\"div\");\n                    messageElement.className = \"mb-2 p-2 bg-base-300 rounded\";\n                    messageElement.textContent = evt.data;\n                    messagesDiv.appendChild(messageElement);\n                    messagesDiv.scrollTop = messagesDiv.scrollHeight;\n                };\n                \n                ws.onclose = function() {\n                    console.log(\"Disconnected from websocket\");\n                    // Attempt to reconnect after 1 second\n                    setTimeout(connect, 1000);\n                };\n            }\n            \n            function sendMessage() {\n                const input = document.getElementById(\"messageInput\");\n                if (input.value) {\n                    ws.send(input.value);\n                    console.log(\"Sent message\", input.value);\n                    input.value = \"\";\n                }\n            }\n            \n            // Connect when the page loads\n            connect();\n            \n            // Allow sending with Enter key\n            document.getElementById(\"messageInput\").addEventListener(\"keypress\", function(e) {\n                if (e.key === \"Enter\") {\n                    sendMessage();\n                }\n            });\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base("WebSocket Demo").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
